<?php
/**
 * Date Copy
 *
 * A module to import and export date data in various ways.
 * Currently only imports date data from events.
 *
 * Importing data from csv files can currently be done using the Node Import module, no need to add that here.
 *
 * @todo
 *  Add in more import/export capabilities like handling ical import and export.
 */
function date_copy_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Copy data in and out of Date module.');
      break;
  }
}

/**
 *  Implementation of hook_menu()
 */
function date_copy_menu($may_cache) {
  $items = array();
  if (!$may_cache) {
    $items[] = array(
      'path'     => 'admin/content/date',
      'title'    => t('Date Import/Export'),
      'description' => t('Import and export date data.'),
      'access'   => user_access('administer content'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'date_copy_import_ical_form',
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path'     => 'admin/content/date/import',
      'title'    => t('Import'),
      'access'   => user_access('administer content'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'date_copy_import_ical_form',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 1,
    );
    $items[] = array(
      'path'     => 'admin/content/date/export',
      'title'    => t('Export'),
      'access'   => user_access('administer content'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'date_copy_export_form',
      'type' => MENU_LOCAL_TASK,
      'weight' => 2,
    );
    $items[] = array(
      'path'     => 'admin/content/date/import/ical',
      'title'    => t('iCal'),
      'access'   => user_access('administer content'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'date_copy_import_ical_form',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 1,
    );
    $items[] = array(
      'path'     => 'admin/content/date/import/event',
      'title'    => t('Events'),
      'access'   => user_access('administer content'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'date_copy_import_event_form',
      'type' => MENU_LOCAL_TASK,
      'weight' => 2,
    );
    $items[] = array(
      'path'     => 'admin/content/date/import/csv',
      'title'    => t('CSV'),
      'access'   => user_access('administer content'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'date_copy_import_csv_form',
      'type' => MENU_LOCAL_TASK,
      'weight' => 3,
    );
    return $items;
  }
}
/**
 * A form to select a target for the imported data.
 */
function date_copy_target_form($extended = FALSE) {
  $form = array();
  $node_types = node_get_types('names');
  $fields = content_fields();
  $target_type_options = array();
  $date_options = array();
  $description_options = array('' => '');
  $uid_options = array('' => '');
  $url_options = array('' => '');
  $location_options = array('' => '');

  // Find out what content types contain date fields and set them up as target options.
  foreach ($fields as $field_name => $field) {
    if ($field['type'] == 'date' || $field['type'] == 'datestamp') {
    	$date_options[$field['type_name']][$field_name] = $field['widget']['label'];
      $target_type_options[$field['type_name']] = $node_types[$field['type_name']];
    }
  }
  // Bring up all fields in the target type as options for various parts of the ical.
  foreach ($fields as $field_name => $field) {
  	if ($field['type'] == 'text' && array_key_exists($field['type_name'], $target_type_options)) {
      $description_options[$field['type_name']][$field_name] = $field['widget']['label'] .' '. $node_types[$field['type_name']];
      $location_options[$field['type_name']][$field_name] = $field['widget']['label'] .' '. $node_types[$field['type_name']];
      $uid_options[$field['type_name']][$field_name] = $field['widget']['label'] .' '. $node_types[$field['type_name']];
      $url_options[$field['type_name']][$field_name] = $field['widget']['label'] .' '. $node_types[$field['type_name']];
    }
    if ($field['type'] == 'link' && array_key_exists($field['type_name'], $target_type_options)) {
      $url_options[$field['type_name']][$field_name] = $field['widget']['label'] .' '. $node_types[$field['type_name']];
    }
  }
  // The body field is also available as an option for the description.
  foreach ($target_type_options as $type_name => $type) {
  	$description_options[$type_name]['body'] = t('body');
  }
  if (sizeof($date_options) < 1) {
    drupal_set_message(t('There are no date fields in this database to import the data into. Please add a date field to the desired node types and be sure to indicate it uses both a "from" and a "to" date.'));
    return $form;
  }

  $form['target_type'] = array(
    '#type' => 'select',
    '#options' => $target_type_options,
    '#title' => t('Target type'),
    '#default_value' => '',
    );
  $form['date_field'] = array(
    '#type' => 'select',
    '#options' => $date_options,
    '#title' => t('Date field'),
    '#default_value' => '',
    '#description' => t('The field which will contain the source dates in target content type.'),
    );
  $form['description_field'] = array(
    '#type' => 'select',
    '#options' => $description_options,
    '#title' => t('Description field'),
    '#default_value' => '',
    '#description' => t('The text or body field which will contain the source description in the target content type.'),
    );
  if ($extended) {
    $form['url_field'] = array(
      '#type' => 'select',
      '#options' => $url_options,
      '#title' => t('Url field'),
      '#default_value' => '',
      '#description' => t('The text or link field which will contain the source url in the target content type.'),
      );
    $form['location_field'] = array(
      '#type' => 'select',
      '#options' => $location_options,
      '#title' => t('Location field'),
      '#default_value' => '',
      '#description' => t('The text field which will contain the source location in the target content type.'),
      );
    $form['uid_field'] = array(
      '#type' => 'select',
      '#options' => $uid_options,
      '#title' => t('Uid field'),
      '#default_value' => '',
      '#description' => t('The text field which will contain the source uid in the target content type.'),
      );
  }
  return $form;
}

/**
 *  Administration page
 */
function date_copy_import_form() {
  // PLACEHOLDER
  drupal_set_message(t('Import dates into CCK from various sources.'));
}

function date_copy_export_form() {
  // PLACEHOLDER
  drupal_set_message(t('This feature is not yet functional.'));
}

function date_copy_import_csv_form() {
  // PLACEHOLDER
  drupal_set_message(t('Importing dates into CCK from a comma separated file can be done using the !link.', array('!link' => l('Node Import module', 'http://drupal.org/project/node_import'))));
}

/**
 * iCal import.
 *
 */
function date_copy_import_ical_form() {
  if (!$POST) {
    $form['#prefix'] = t('Create a new CCK content type to import your events into. Make sure it has a date field that can allows a To date so it can accept the From date and To date of the iCal feed. Test the new type by trying to create a node manually and make sure all the right options are available in the form before attempting an import.');
  }
  $form['source_file'] = array(
    '#type' => 'textfield',
    '#title' => t('Source file'),
    '#default_value' => '',
    );
  $form += date_copy_target_form(TRUE);

  $form['#value'] = t('<p>Set what the default value should be for each imported node.</p>');
  // Node author information for administrators
  $form['name'] = array('#type' => 'textfield', '#title' => t('Authored by'), '#maxlength' => 60, '#autocomplete_path' => 'user/autocomplete', '#default_value' => $node->name ? $node->name : '', '#description' => t('Leave blank for %anonymous.', array('%anonymous' => variable_get('anonymous', t('Anonymous')))));
  $form['status']   = array('#type' => 'checkbox', '#title' => t('Published'), '#default_value' => $node->status);
  $form['promote']  = array('#type' => 'checkbox', '#title' => t('Promoted to front page'), '#default_value' => $node->promote);
  $form['sticky']   = array('#type' => 'checkbox', '#title' => t('Sticky at top of lists'), '#default_value' => $node->sticky);
  $form['revision'] = array('#type' => 'checkbox', '#title' => t('Create new revision'), '#default_value' => $node->revision);

  if (module_exists('og')) {
  	og_form_add_og_audience($form_id, $form);
  }
  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
  return $form;

}

function date_copy_import_ical_form_submit($form_id, $form_values) {
  extract($form_values);
  include_once(drupal_get_path('module', 'date_api') .'/date.inc');
  include_once(drupal_get_path('module', 'date_api') .'/date_ical.inc');

  $imported_values = ical_import($source_file);

  $node_types = node_get_types('names');
  $fields = content_fields();
  $account = user_load(array('name' => $name));
  foreach ($imported_values as $key => $value) {
  	$start = $fields[$date_field]['type'] == 'date' ? date_unix2iso($value['start']) : $value['start'];
  	$end = $fields[$date_field]['type'] == 'date' ? date_unix2iso($value['end']) : $value['end'];
    $target_node = new StdClass();
    $target_node->nid = 0;
    $target_node->type = $target_type;
    $target_node->name = $name;
    $target_node->uid = $account->uid;
    $target_node->status = $status;
    $target_node->promote = $promote;
    $target_node->sticky = $sticky;
    $target_node->revision = $revision;
    if (module_exists('og')) {
      $target_node->og_public = $og_public;
      $target_node->og_groups = $og_groups;
    }
    $target_node->title = stripslashes($value['summary']);
    $target_node->$date_field = array(0 => array('value' => $start, 'value2' => $end));
    if ($description_field == 'body') {
      $target_node->body = stripslashes($value['description']);
    }
    else {
    	$target_node->$description_field = array(0 => array('value' => stripslashes($value['description'])));
    }
    $target_node->$uid_field = array(0 => array('value' => stripslashes($value['uid'])));
    $target_node->$location_field = array(0 => array('value' => stripslashes($value['location'])));
    if ($fields[$url_field]['type'] == 'link') {
      $target_node->$url_field = array(0 => array('url' => stripslashes($value['url']), 'title' => stripslashes($value['summary'])));
    }
    else {
    	$target_node->$url_field = array(0 => array('value' => stripslashes($value['url'])));
    }
    node_save($target_node);

    watchdog('date_copy', t('%type: created %title.', array('%type' => t($target_type), '%title' => $target_node->title)), WATCHDOG_NOTICE, l(t('view'), 'node/'. $target_node->nid));
    $new_field = $target_node->$date_field;
    $rows[] = array(l($target_node->title, 'node/'. $target_node->nid), $new_field[0]['value'], $new_field[0]['value2']);
  }
}

/**
 *  Event import.
 */
function date_copy_import_event_form() {
  $node_types = node_get_types('names');

  // We can do an import if there are event fields available whether or not the event module is enabled.
  if (!db_table_exists('event')) {
    drupal_set_message(t('There is no event table in this database. No event import options are available.'));
    return array();
  }
  else {
    $source_type_options = array();
    $result = db_query("SELECT DISTINCT n.type FROM {event} e INNER JOIN {node} n ON e.nid=n.nid");
    while ($arr = db_fetch_array($result)) {
      $source_type_options[$arr['type']] = $node_types[$arr['type']];
    }
    if (sizeof($source_type_options) < 1) {
      drupal_set_message(t('There are no event nodes in this database. No event import options are available.'));
      return array();
    }
  }
  if (!$POST) {
    $form['#prefix'] = t('Create a new CCK content type to import your events into. Make sure it has a date field that can allows a To date so it can accept the From date and To date of the event. If you want to bring in other node data like taxonomy terms and Organic Groups permissions, make sure the new content type is configured the same way as the source event. Test the new type by trying to create a node manually and make sure all the right options are available in the form before attempting an import.');
  }
  $form['source_type'] = array(
    '#type' => 'select',
    '#options' => $source_type_options,
    '#title' => t('Source type'),
    '#default_value' => '',
    );
  $form += date_copy_target_form();
  $form['delete_old'] = array('#type' => 'select', '#options' => array('yes' => t('Yes'), 'no' => t('No')), '#title' => t('Delete original event?'), '#description' => t('Should the original entry be deleted once it has been copied to the new content type? If so, be sure to back up your database first.'));
  $form['max'] = array('#type' => 'textfield', '#title' => t('Limit'), '#description' => t('The maximum number of nodes to convert in this pass.'));
  $form['start_nid'] = array('#type' => 'textfield', '#title' => t('Starting nid'), '#default_value' => 0, '#description' => t('Convert nodes with nids greater than or equal to this number.'));
  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
  return $form;

}

/**
 *  Import date data created by event module.
 *
 *  $target_type
 *    the content type to import these values into.
 *  $source_type
 *    the content type to import values from.
 *  $date_field
 *    the field name to import the start time into.
 *  $description_field
 *    the field name to import the description into, in Drupal 5.x it can be 'body'
 *  $limit
 *    the maximum number of records to convert at one time.
 */
function date_copy_import_event_form_submit($form_id, $form_values) {
  extract($form_values);
  $_SESSION['date_copy_conversion'] = TRUE;
  $rows = array();
  //$count = db_result(db_query("SELECT COUNT(*) FROM {event} e INNER JOIN {node} n ON e.nid=n.nid WHERE n.type = '%s' AND n.nid > %d ORDER BY n.nid", array($source_type, $start_nid)));
  $i = 0;
  $limit = min(10, intval($max));
  while($i < intval($max)) {
    $new_rows = date_copy_convert_events( $source_type, $target_type, $date_field, $description_field, $limit, $i);
    $rows = array_merge($rows, $new_rows);
    $i += $limit;
  }
  drupal_set_message(t('%limit events have been converted.', array('%limit' => sizeof($rows))));
  drupal_set_message(theme('table', array(t('Title'), t('Source Id'), t('Target Id'), t('Start'), t('End')), $rows));
  return;
}

function date_copy_convert_events( $source_type, $target_type, $date_field, $description_field, $limit, $start = 0) {

  include_once(drupal_get_path('module', 'date_api') .'/date.inc');
  include_once(DATE_TIMEZONES);

  // Get info about the field we are importing into
  $field   = content_fields($date_field);

  // Get date tz handling, could be date, site, GMT, or none.
  $tz_handling  = $field['tz_handling'];

  // Get event tz handling, could be event, site, or user.
  $event_tz_handling = variable_get('event_timezone_display', 'event');
  $timezones = event_get_timezones();

  $rows = array();

  if (!$result = db_query_range("SELECT * FROM {event} e INNER JOIN {node} n ON e.nid=n.nid WHERE n.type = '%s' ORDER BY n.nid", array($source_type), $start, $limit)) {
    return array();
  }
  while ($event = db_fetch_object($result)) {

    $source_nid = $event->nid;
    $event_node = node_load($source_nid);

    // Creating new nodes or converting existing ones??
    if ($target_type != $source_type) {
      $target_node = new StdClass();
      $target_node->nid = 0;
      $target_node->type = $target_type;
      foreach ($event_node as $key => $val) {
        if ($key != 'nid' && $key != 'type') {
          $target_node->$key = $val;
        }
      }
    }
    else {
      $target_node = $event_node;
    }

    if ($description_field != 'body') {
      $target_node->$description_field = array(0 => array('value' => $event_node->body));
      unset($target_node->body);
    }

    $timestamp  = $event->event_start;
    $timestamp2 = $event->event_end;
    if ($field['type'] == 'date') {
      $data = array(0 => array('value' => date_unix2iso($timestamp), 'value2' => date_unix2iso($timestamp2), 'timezone' => '', 'offset' => ''));
    }
    else {
      $data = array(0 => array('value' => $timestamp, 'value2' => $timestamp2, 'timezone' => '', 'offset' => ''));
    }
    if ($tz_handling == 'date' && $event_tz_handling == 'event') {
      $data[0]['timezone'] = $timezones[$event->timezone]['timezone'];
      $data[0]['offset'] = event_get_offset($event->timezone, $timestamp);
    }
    else {
      unset($data[0]['timezone']);
      unset($data[0]['offset']);
    }

    $target_node->$date_field = $data;

    $event_fields = array('event_start', 'event_end', 'timezone', 'start_offset', 'start_format', 'start_time_format', 'end_offset', 'end_format', 'end_time_format', 'event_node_title');
    foreach ($event_fields as $e) {
      unset($target_node->$e);
    }

    node_save($target_node);

    if ($target_type != $source_type) {
      watchdog('date_copy', t('%type: created %title.', array('%type' => t($target_type), '%title' => $target_node->title)), WATCHDOG_NOTICE, l(t('view'), 'node/'. $target_node->nid));
      if ($delete_old) {
        node_delete($source_nid);
        watchdog('date_copy', t('%type: deleted %title.', array('%type' => t($source_type), '%title' => $target_node->title)), WATCHDOG_NOTICE);
      }
    }
    else {
      watchdog('date_copy', t('%type: updated %title.', array('%type' => t($target_type), '%title' => $target_node->title)), WATCHDOG_NOTICE, l(t('view'), 'node/'. $target_node->nid));
    }
    $new_field = $target_node->$date_field;
    $rows[] = array(l($target_node->title, 'node/'. $target_node->nid), $source_nid, $target_node->nid, $new_field[0]['value'], $new_field[0]['value2']);
  }
  return $rows;
}
