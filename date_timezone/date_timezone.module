<?php
// $Id: date_timezone.module,v 1.9 2008/02/18 19:32:29 karens Exp $
/**
 * @file
 * This module will make the alter the user and site timezone forms to
 * select a timezone name instead of a timezone offset.
 *
 * This module won't be needed once core starts tracking timezone names
 * instead of offsets.
 */

/**
 * Implementation of hook_form_alter().
 *
 * Override system handling of user and site timezone selection.
 */
function date_timezone_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'system_date_time_settings') {
    date_timezone_site_form($form);
  }
  elseif ($form_id == 'user_edit' && variable_get('configurable_timezones', 1) && isset($form['timezone'])) {
    date_timezone_user_form($form);
  }
}

/**
 * Override form for the site timezone settings form.
 * Display a list of timezone names instead of offsets
 * and hide the offset value.
 */
function date_timezone_site_form(&$form) {
  $timezone = variable_get('date_default_timezone_name', NULL);
  $form['date_default_timezone'] = array(
    '#type' => 'select',
    '#title' => t('Default time zone'),
    '#default_value' => $timezone,
    '#options' => date_timezone_names(),
    '#description' => t('Select the default site time zone. If in doubt, choose the timezone that is closest to your location which has the same rules for daylight savings time.'),
    '#weight' => -10,
    '#validate' => array('date_timezone_update_site' => array()),
    '#offset' => variable_get('date_default_timezone', 0),
  );
}

/**
 * Override form for the user timezone settings form.
 * Display a list of timezone names instead of offsets
 * and hide the offset value.
 */
function date_timezone_user_form(&$form) {
  $account = $form['_account']['#value'];
  $form['timezone']['#validate'] = array('date_timezone_update_user' => array());
  $form['timezone']['#uid'] = $account->uid;
  $form['timezone']['timezone']['#type'] = 'hidden';
  $form['timezone']['timezone']['#value'] = $form['timezone']['#default_value'];
  $timezone = $account->timezone_name ? $account->timezone_name : variable_get('date_default_timezone_name', NULL);

  $form['timezone']['timezone_name'] = array(
    '#type' => 'select',
    '#title' => t('Default time zone'),
    '#default_value' => $timezone,
    '#options' => date_timezone_names(),
    '#description' => t('Select your current local time.  If in doubt, choose the timezone that is closest to your location which has the same rules for daylight savings time. Dates and times throughout this site will be displayed using this time zone.'),
  );
  return $form;
}

/**
 * Callback from site timezone settings form to update site timezone info.
 * When the timezone name is updated, update the offset as well.
 */
function date_timezone_update_site($element) {
  $timezone = $element['#value'];
  if (empty($timezone)) {
    form_set_value($element, $element['#offset']);
  }
  else {
    variable_set('date_default_timezone_name', $timezone);
    $date = date_make_date('now', $timezone);
    form_set_value($element, date_offset_get($date));
  }
}

/**
 * Callback from user timezone settings form to update user timezone info.
 * When the timezone name is updated, update the offset as well.
 */
function date_timezone_update_user($element) {
  $timezone = $element['timezone_name']['#value'];
  if (!empty($timezone)) {
    $date = date_make_date('now', $timezone);
    $offset = date_offset_get($date);
    form_set_value($element['timezone'], $offset);
  }
}

/**
 * Implementation of hook_init().
 */
function date_timezone_init() {
  global $user;
  if (!function_exists('throttle_status') || !throttle_status()) { //Don't do anything if the throttle is active.
    // See if the user needs to have their timezone name set.
    if (variable_get('configurable_timezones', 1) && $user->uid > 0 && empty($user->timezone_name)) {
      $timezone = $user->timezone / -60;
      $js = "\nvar d = new Date();";
      $js .= "\nvar dstring = d.toString();";
      $js .= "\nvar doffset = d.getTimezoneOffset();";
      $js .= "\n" .'{$(document).ready(function(){$.get('. drupal_to_js(url('timezone/', array('absolute' => TRUE))) .", {doffset: doffset, dstring: dstring} );})}";
      drupal_add_js($js, 'inline');
    }
  }
}

/**
 * Implementation of hook_menu().
 */
function date_timezone_menu() {
  $items = array();
  $items['timezone'] = array(
    'title' => t('Browser timezone'),
    'page callback' => 'date_timezone_check_browser',
    'type' => MENU_CALLBACK,
    'access arguments' => TRUE,
    );
  return $items;
}

/**
 * Menu callback for /date/timezone/
 * Take the data sent from the Javascript and update the timezone offset and name.
 */
function date_timezone_check_browser() {
  global $user;
  $offset = intval($_GET['doffset'] * -60);
  $string = urldecode($_GET['dstring']);
  $timezone_name = date_timezone_get_timezone($string, $offset);
  if (!empty($timezone_name)) {
    $_SESSION['timezone'] = $offset; //Update session variable.
    //If needed update user object with new timezone value.
    if ($user->uid != 0) {
      watchdog('user', t('Timezone name updated to %timezone. Timezone offset updated from %old to %new.', array(
        '%timezone' => $timezone_name, '%old' => $user->timezone / 3600, '%new' => $offset / 3600)));
      user_save($user, array('timezone' => $offset, 'timezone_name' => $timezone_name));
    }
  }
}

/**
 * Return the timezone name of the user's browser.
 *
 * The timezone offset is pretty reliably available using javascript's
 * Date function. The timezone name is buried in a string created by the
 * browser. There are many different ways that string could be configured,
 * so try to tease it out using a couple regex strings.
 *
 * This has a limitation built into the timezone_name_from_abbr() function
 * which is that it will return only the first timezone name that matches,
 * so if there are multiple timezones in the database with the same abbr and
 * offset or offset and dst value, later timezone names won't be found.
 * However, this will produce a timezone that has the same rules as the
 * browser timezone, so timezone conversions should work correctly even if
 * it's not the same as the browser zone.
 *
 * This should work pretty well for any browser that uses the timezone
 * abbreviation somewhere in its date string, less well for other
 * browsers.
 *
 * @param string $string
 *   the result of javascript Date().toString()
 * @param integer $offset
 *   the result of javascript Date().getTimezoneOffset()
 * @return unknown
 *   the name of the timezone for this browser
 */
function date_timezone_get_timezone($string, $offset) {
  // Must use PHP 5 function timezone_name_from_abbr() function for this to work.
  if (!function_exists('timezone_name_from_abbr')) {
    return NULL;
  }
  elseif (empty($string) || empty($offset)) {
    return NULL;
  }

  // Try to parse a timezone abbreviation out of the browser date string
  // by looking for any 3-5 character value that exists in the string
  // then checking for that value in the timezone_abbreviations_list.
  // Make sure not to find a match for things like GMT-0500 since that
  // should not be interpreted as being in GMT. Also skip day and
  // month name abbreviations.
  preg_match_all('([a-z]{3,5}[^\-\+])', strtolower($string), $abbrs);
  $omit = array('mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun', 'jan', 'feb',
    'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec');
  foreach ((array) $abbrs[0] as $abbr) {
    $abbr = trim($abbr);
    if (!in_array($abbr, $omit)) {
      if (in_array($abbr, array_keys(timezone_abbreviations_list()))) {
        if ($tz = timezone_name_from_abbr($abbr, $offset)) {
          // We found a match, print it and exit
          return $tz;
        }
      }
    }
  }
  // If that didn't work, try to find whether we are in dst. Most long
  // versions of timezone names that are in dst include the words
  // 'Daylight Time' or 'Summer Time', so see if either phrase is
  // in the string anywhere. If the string values are in languages other
  // than English, this won't work.
  if (preg_match('(daylight time|summer time)', strtolower($string), $matches) ) {
    if ($tz = timezone_name_from_abbr(NULL, $offset, 1)) {
      // We found a match, print it and exit
      return $tz;
    }
  }

  // If the above things did not work, we're left with searching for
  // an abbreviation by the offset. That won't work unless we supply
  // something for the dst argument. Since we didn't find anything that
  // indicates we're in dst, make the dst argument zero and hope for the
  // best.
  return timezone_name_from_abbr(NULL, $offset, 0);
}