<?php
// $Id: date.module,v 1.29 2007/12/18 20:15:37 karens Exp $

/**
 * @file
 * Defines date/time field types for the Content Construction Kit (CCK).
 */

/**
 * Implementation of hook_menu().
 */
function date_menu($may_cache) {
  if (!$may_cache) {
    if (module_exists('views')) {
      include_once(drupal_get_path('module', 'date') .'/date_views.inc');
    }
  }
}

/**
 * Implementation of hook_field_info().
 */
function date_field_info() {
  return array(
    'date' => array('label' => 'Date'),
    'datestamp' => array('label' => 'Datestamp'),
  );
}

/**
 * Implementation of hook_widget_info().
 */
function date_widget_info() {
  $info = array(
    'date_select' => array('label' => t('Select List'),
      'field types' => array('date', 'datestamp'),
    ),
    'date_text' => array('label' => t('Text Field with strtotime validation'),
      'field types' => array('date', 'datestamp'),
    ),
  );
  if (module_exists('jscalendar')) {
    $info['date_js'] = array('label' => t('Text Field with javascript pop-up calendar'),
       'field types' => array('date', 'datestamp'),
     );
  }
  if (module_exists('date_popup')) {
    $info['date_popup'] = array('label' => t('Text Field with jquery pop-up calendar'),
       'field types' => array('date', 'datestamp'),
     );
  }
  return $info;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function date_field_formatter_info() {
  return array(
    'default' => array('label' => t('Default'),
      'field types' => array('date', 'datestamp')),
    'long' => array('label' => t('Long'),
      'field types' => array('date', 'datestamp')),
    'medium' => array('label' => t('Medium'),
      'field types' => array('date', 'datestamp')),
    'short' => array('label' => t('Short'),
      'field types' => array('date', 'datestamp')),
    'iso' => array('label' => t('ISO'),
      'field types' => array('date', 'datestamp')),
    'timestamp' => array('label' => t('Timestamp'),
      'field types' => array('date', 'datestamp')),
    'feed' => array('label' => t('Feed'),
      'field types' => array('date', 'datestamp')),
    'ical' => array('label' => t('iCal'),
      'field types' => array('date', 'datestamp')),
    'format_interval' => array('label' => t('As Time Ago'),
      'field types' => array('date', 'datestamp')),
  );
}

/**
 * Implementation of hook_field_formatter().
 */
function date_field_formatter($field, $item, $formatter, $node) {
  // Call the right theme for this formatter.
  return theme('date_format_'. $formatter, $field, $item, $node);
}

/**
 * Helper function for creating formatted date arrays from a formatter.
 *
 * Use the Date API to get an object representation of a date field
 *
 * @param array $field
 * @param array $item - a node field item, like $node->myfield[0]
 *
 * @return array that holds the From and To date objects
 *  Each date object looks like:
 *       date [value] => array (
 *         [db] => array (  // the value stored in the database
 *           [object] => the datetime object
 *           [datetime] => 2007-02-15 20:00:00
 *         )
 *         [local] => array (  // the local representation of that value
 *           [object] => the datetime object
 *           [datetime] => 2007-02-15 14:00:00
 *           [timezone] => US/Central
 *           [offset] => -21600
 *         )
 *      )
 */
function date_formatter_process($field, $item, $node, $format = '', $base = '', $append = '') {
  $dates = array();
  if (!is_array($field) || !is_array($item)) return $dates;

  $base = empty($base) ? 'local' : $base;

  $process = date_process_values($field);
  foreach ($process as $processed) {
    if (empty($item[$processed])) {
      $dates[$processed] = NULL;
    }
    else {
      // create a date object with a gmt timezone from the database value
      $value = $item[$processed];
      $value = $field['type'] == 'DATE_UNIX' ? "@$value" : $value;
      $date = date_create($value, timezone_open('UTC'));
      $dates[$processed] = array();
      $dates[$processed]['db']['object'] = $date;
      $dates[$processed]['db']['datetime'] = date_format($date, DATE_FORMAT_DATETIME);
      if (is_object($date) && !empty($format)) {
        $dates[$processed]['formatted'] = date_format($date, $format) . $append;
      }
      else {
        $dates[$processed]['formatted'] = '';
      }

      // For no timezone handling, set local value to the same as the db value.
      if ($field['tz_handling'] == 'none'
        || !in_array('hour', date_granularity($field))
        || $field['tz_handling'] == 'date' && empty($item['timezone'])) {
          $obj->local = $obj->db;
      }
      else {
        $timezone = date_get_timezone($field['tz_handling'], $item['timezone']);
        date_timezone_set($date, timezone_open($timezone));
        $dates[$processed]['local']['object'] = $date;
        $dates[$processed]['local']['datetime'] = date_format($date, DATE_FORMAT_DATETIME);
        $dates[$processed]['local']['timezone'] = $timezone;
        $dates[$processed]['local']['offset'] = date_offset_get($date);
      }
      if (is_object($date) && !empty($format)) {
        $dates[$processed]['formatted'] = date_format($date, $format) . $append;
      }
      else {
        $dates[$processed]['formatted'] = '';
      }
    }
  }
  $dates['format'] = $format;
  return $dates;
}

/**
 * $field['granularity'] will contain an array like ('hour' => 'hour', 'month' => 0)
 * where the values turned on return their own names and the values turned off return a zero
 * need to reconfigure this into a simple array of the turned on values
 */
function date_granularity($field) {
  if (!is_array($field) || !is_array($field['granularity'])) {
    $field['granularity'] = drupal_map_assoc(array('year', 'month', 'day'));
  }
  return array_values(array_filter($field['granularity']));
}

/**
 *  Function to figure out which timezone applies to a date and select it
 */
function date_get_timezone($handling, $timezone = '') {
  switch ($handling) {
    case('site'):
      $timezone = date_default_timezone_name(FALSE);
      break;
    case('date'):
      $timezone = empty($timezone) ? $timezone : date_default_timezone_name();
      break;
    case('user'):
      $timezone = date_default_timezone_name();
    case('none'):
      $timezone = 'UTC';
      break;
    default:
      $timezone = 'UTC';
  }
  return $timezone > '' ? $timezone : date_default_timezone_name();
}

/**
 * Empty or reset cached values.
 *
 * @param $remove
 *   whether or not to completely remove the caches.
 */
function date_clear_all($remove = FALSE) {
  if (module_exists('views')) {
    if ($remove) {
      cache_clear_all('date_browser_views', 'cache_views');
    }
    else {
      date_views_browser_get_views(TRUE);
    }
  }
}

/**
 * Helper function to create an array of the date values in a
 * field that need to be processed.
 */
function date_process_values($field) {
  return $field['todate'] ? array('value', 'value2') : array('value');
}

/**
 * Implementation of hook_help().
 */
function date_help($section) {
  switch ($section) {
    case 'admin/help#date':
      return t('<p>Complete documentation for the Date and Date API modules is available at !link.</p>', array('!link' => l('http://drupal.org/node/92460', 'http://drupal.org/node/92460')));
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 * Make sure date information gets updated.
 */
function date_form_alter($form_id, &$form) {
  if ($form_id == 'views_edit_view') {
    $form['#submit'] = array_merge($form['#submit'], array('date_clear_all' => array()));
  }
}

/**
 * Implementation of hook_field().
 *
 * Validation and submission operation code is moved into a separate
 * file and included only when processing forms.
 */
function date_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
      include_once(drupal_get_path('module', 'date') .'/date_elements.inc');
      return _date_field_validate($op, $node, $field, $items, $teaser, $page);
      break;

    case 'insert':
    case 'update':
      include_once(drupal_get_path('module', 'date') .'/date_elements.inc');
      return _date_field_update($op, $node, $field, $items, $teaser, $page);
      break;
  }
}

/**
 * Implementation of hook_widget().
 *
 * This code and all the processes it uses are in a separate file,
 * included only when processing forms.
 */
function date_widget($op, &$node, $field, &$items) {
  include_once(drupal_get_path('module', 'date') .'/date_elements.inc');
  return _date_widget($op, $node, $field, $items);
}

/**
 * Implementation of hook_elements().
 *
 * This code and all the processes it uses are in a separate file,
 * included only when processing forms.
 */
function date_elements() {
  include_once(drupal_get_path('module', 'date') .'/date_elements.inc');
  return _date_elements();
}

/**
 * Wrapper functions for date administration, included only when
 * processing field settings.
 */
function date_widget_settings($op, $widget) {
  include_once(drupal_get_path('module', 'date') .'/date_admin.inc');
  return _date_widget_settings($op, $widget);
}

function date_field_settings($op, $field) {
  include_once(drupal_get_path('module', 'date') .'/date_admin.inc');
  return _date_field_settings($op, $field);
}

/**
 * Wrapper functions for views hooks.
 */
function date_views_filters($field) {
  include_once('./'. drupal_get_path('module', 'date') .'/date_views.inc');
  return _date_views_filters($field);
}
function date_views_timestamp_filter_handler($op, $filter, $filterinfo, &$query) {
  include_once('./'. drupal_get_path('module', 'date') .'/date_views.inc');
  return _date_views_timestamp_filter_handler($op, $filter, $filterinfo, $query);
}
function date_views_filter_handler($op, $filter, $filterinfo, &$query, $field_type = 'iso') {
  include_once('./'. drupal_get_path('module', 'date') .'/date_views.inc');
  return _date_views_filter_handler($op, $filter, $filterinfo, $query, $field_type);
}
function date_views_handler_filter_date_value_form($field) {
  include_once('./'. drupal_get_path('module', 'date') .'/date_views.inc');
  return _date_views_handler_filter_date_value_form($field);
}
function date_views_timestamp_argument_range_handler($op, &$query, $argtype, $arg = '') {
  include_once('./'. drupal_get_path('module', 'date') .'/date_views.inc');
  return _date_views_timestamp_argument_range_handler($op, $query, $argtype, $arg);
}
function date_views_argument_range_handler($op, &$query, $argtype, $arg = '', $field_type = 'iso') {
  include_once('./'. drupal_get_path('module', 'date') .'/date_views.inc');
  return _date_views_argument_range_handler($op, $query, $argtype, $arg, $field_type);
}
function date_views_style_plugins() {
  include_once('./'. drupal_get_path('module', 'date') .'/date_views.inc');
  return _date_views_style_plugins();
}
function date_views_query_alter(&$query, &$view) {
  include_once('./'. drupal_get_path('module', 'date') .'/date_views.inc');
  return _date_views_query_alter($query, $view);
}

/**
 * Callback for pathauto.
 */
function date_pathauto_node($op, $node = NULL) {
  include_once(drupal_get_path('module', 'date') .'/date_pathauto.inc');
  return _date_pathauto_node($op, $node);
}

/**
 * @addtogroup themeable
 * @{
 *
 * Formatter themes
 */
function theme_date_format_ical($field, $item, $node) {
  // for ical, send the db value with Z appended to indicate it is the gmt value
  $format = 'Ymd\THis';
  $append = 'Z';
  $base = 'db';
  $dates = date_formatter_process($field, $item, $node, $format, $base, $append);
  return theme('date_display_combination', $field, $dates, $node);
}

function theme_date_format_timestamp($field, $item, $node) {
  $format = 'U';
  $dates = date_formatter_process($field, $item, $node, $format, $base, $append);
  return theme('date_display_combination', $field, $dates, $node);
}

function theme_date_format_long($field, $item, $node) {
  $format = $field['output_format_custom_long'] > '' ? $field['output_format_custom_long'] : ($field['output_format_date_long'] ? $field['output_format_date_long'] : variable_get('date_format_long',  'l, F j, Y - H:i'));
  $format = date_format_granularity($format, date_granularity($field));
  $dates = date_formatter_process($field, $item, $node, $format, $base, $append);
  return theme('date_display_combination', $field, $dates, $node);
}

function theme_date_format_medium($field, $item, $node) {
  $format = $field['output_format_custom_medium'] > '' ? $field['output_format_custom_medium'] : ($field['output_format_date_medium'] ? $field['output_format_date_medium'] : variable_get('date_format_medium',  'D, m/d/Y - H:i'));
  $format = date_format_granularity($format, date_granularity($field));
  $dates = date_formatter_process($field, $item, $node, $format, $base, $append);
  return theme('date_display_combination', $field, $dates, $node);
}

function theme_date_format_short($field, $item, $node) {
  $format = $field['output_format_custom_short'] > '' ? $field['output_format_custom_short'] : ($field['output_format_date_short'] ? $field['output_format_date_short'] : variable_get('date_format_short', 'm/d/Y - H:i'));
  $format = date_format_granularity($format, date_granularity($field));
  $dates = date_formatter_process($field, $item, $node, $format, $base, $append);
  return theme('date_display_combination', $field, $dates, $node);
}

function theme_date_format_iso($field, $item, $node) {
  $format = DATE_FORMAT_ISO .'P';
  $dates = date_formatter_process($field, $item, $node, $format, $base, $append);
  return theme('date_display_combination', $field, $dates, $node);
}

function theme_date_format_feed($field, $item, $node) {
  $format = 'D, j M Y H:i:s O';
  $dates = date_formatter_process($field, $item, $node, $format, $base, $append);
  return theme('date_display_combination', $field, $dates, $node);
}

function theme_date_format_default($field, $item, $node){
  $format = $field['output_format_custom'] > '' ? $field['output_format_custom'] : ($field['output_format_date'] ? $field['output_format_date'] : variable_get('date_format_short', 'm/d/Y - H:i'));
  $format = date_limit_format($format, date_granularity($field));
  $dates = date_formatter_process($field, $item, $node, $format, $base, $append);
  return theme('date_display_combination', $field, $dates, $node);
}

/**
 *  Theme from/to date combination in the view.
 *
 *  @param $field = the field settings
 *  @param $node = node information, this is not always available and not
 *     always the full node, it depends on what value was provided to the formatter.
 *     Only the nid is always guaranteed to be available.
 *  @param $dates - an array of date information, see explanation for date_field_object() for details.
 *
 *  Useful values:
 *    $field['type_name'] is the content type
 *    $field['type'] is the field type
 *
 *    $node->nid is the node nid, get other node values using node_load($node->nid)
 *
 *    $dates['format'] - the format string used on these dates
 *    $dates['value']['local']['object'] - the local date object for the From date
 *    $dates['value2']['local']['object'] - the local date object for the To date
 *    $dates['value']['local']['datetime'] - the datetime value of the From date database (GMT) value
 *    $dates['value2']['local']['datetime'] - the datetime value of the To date database (GMT) alue
 *    $dates['value']['formatted'] = formatted From date, i.e. 'February 15, 2007 2:00 pm';
 *    $dates['value2']['formatted'] = formatted To date, i.e. 'February 15, 2007 6:00 pm';
 */
function theme_date_display_combination($field, $dates, $node = NULL) {
  $date1 = $dates['value']['formatted'];
  $date2 = $dates['value2']['formatted'];
  if (empty($date1) && empty($date2)) {
    return '';
  }
  elseif ($date1 == $date2 || empty($date2)) {
    return '<span class="date-display-single">'. $date1 .'</span>';
  }
  else {
    return '<span class="date-display-start">'. $date1 .'</span>'.
      '<span class="date-display-separator"> - </span>'.
      '<span class="date-display-end">'. $date2 .'</span>';
  }
}

/**
 * Theme a format interval for a date element
 *
 *  @param $field = the field settings
 *  @param $node = node information, this is not always available and not
 *     always the full node, it depends on what value was provided to the formatter.
 *     Only the nid is always guaranteed to be available.
 *  @param $dates - an array of date information, see explanation for date_field_object for details.
 *  @return a formatted display
 *
 */
function theme_date_format_interval($field, $item, $node = NULL) {
  $dates = date_formatter_process($field, $item, $node);

  // Time to compare dates to
  $now = date_format(date_create('now', timezone_open(date_default_timezone_name())), 'U');

  // Pull local timestamps out of date objects.
  $start = date_format($dates['value']['local']['object'], 'U');
  if (!$end = date_format($dates['value2']['local']['object'], 'U')) {
    $end = $start;
  }
  // 1) The date is entirely in the future
  if ($now < $start) {
    return t('!time', array('!time' => format_interval($start - $now)));
  }
  // 2) Ongoing date
  elseif ($now > $start && $now <= $end) {
    //return t('Started !time ago', array('!time' => format_interval($now - $timestamp1)));
    return t('ongoing');
  }
  // 3) Date is in the past
  else {
    return t('!time ago', array('!time' => format_interval($now - $end)));
  }
}

/** @} End of addtogroup themeable */