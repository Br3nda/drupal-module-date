<?php
// $Id: date_repeat.module,v 1.5 2007/10/27 12:45:20 karens Exp $

/**
 * Implementation of hook_help()
 *
 * @ingroup date_repeat_core
 * @param $section The page which is requesting help.
 * @return The help text.
 */
function date_repeat_help($section) {
  switch ($section) {
    case 'admin/help#date_repeat':
      return t("<p>date_repeat enables the creation of repeating event patterns. </p><ol>   <li>Set 'Repeat type'&nbsp; to the type of repeating pattern you wish to create</li>   <li>&nbsp;Set 'Until' date to control how many repeating events will be created. If you want the pattern to be indefinite, then leave 'Until' empty.</li>   <li>Set any other parameters for the repeat pattern</li>   <li>Set any exception dates to the pattern using the exception editor.&nbsp; Exception dates are dates where a repeat event will not be created even if it falls within the repeat sequence<br />   </li> <li>You can't create repeat events in the past--if you set a sequence starting in the past, it will begin to render on the current date (or possibly the day before)</li> </ol> <p> All other parameters operate as follows:<br /> </p><p>Multiple selections within the same parameter use an OR comparison for determining the pattern (ex. Monday OR Tuesday OR Wednesday).&nbsp; Choosing multiple parameters uses an AND comparison between the parameters (ex. on Monday AND in March).</p><p><br /> So, setting the days parameter to Monday, Wednesday--and the month parameter to July, August would result in this comparison logic: </p><p>Occurs on (Monday OR Wednesday) AND (July OR August)&nbsp;</p> <p>date_repeat's pattern creation was largely modeled on the iCal RRULE specification.&nbsp; At this time, it should support all RRULE parameters, with the following exceptions:</p>  <ol>   <li>Recurrance periods less than DAILY<br />   </li>   <li>BYDAY declarations greater than 5 and less than -5 (ex. 20th Monday of the year is not supported).&nbsp; Other similar patterns can be built that should approximate this functionality.</li>   <li>BYSETPOS parameter<br />   </li> <li>EXRULE parameter<br />   </li> </ol> <p> </p><p>&nbsp;</p> <p>&nbsp;</p> <blockquote> <p> </p></blockquote>");
  }
}

function FREQ_options() {
  return array(
    'NONE' => t('Never'),
    'DAILY' => t('Daily'),
    'WEEKLY' => t('Weekly'),
    'MONTHLY' => t('Monthly'),
    'YEARLY' => t('Yearly')
  );
}

/**
 * Translated and untranslated arrays of the iCal day of week names.
 * We need the untranslated values for date_modify(), translated
 * values when displayed to user.
 */
function date_repeat_dow_day_options($translated = TRUE) {
  if ($translated) {
    return array(
      'SU' => t('Sunday'),
      'MO' => t('Monday'),
      'TU' => t('Tuesday'),
      'WE' => t('Wednesday'),
      'TH' => t('Thursday'),
      'FR' => t('Friday'),
      'SA' => t('Saturday')
    );
  }
  else {
    return array(
      'SU' => 'Sunday',
      'MO' => 'Monday',
      'TU' => 'Tuesday',
      'WE' => 'Wednesday',
      'TH' => 'Thursday',
      'FR' => 'Friday',
      'SA' => 'Saturday'
    );
  }
}

function date_repeat_dow_count_options() {
  return array(
    '1' => t('1st'),
    '2' => t('2nd'),
    '3' => t('3rd'),
    '4' => t('4th'),
    '5' => t('5th'),
    '-1' => t('Last'),
    '-2' => t('Next to last'),
    '-3' => t('2nd from last'),
    '-4' => t('3rd from last'),
    '-5' => t('4th from last')
  );
}

function date_repeat_dow_options() {
  $options = date_repeat_dow_day_options();
  foreach (date_repeat_dow_day_options() as $DOWkey => $DOWvalue) {
    foreach (date_repeat_dow_count_options() as $Countkey => $Countvalue) {
      $options[$Countkey.$DOWkey] = $Countvalue.' '.$DOWvalue;
    }
  }
  return $options;
}

/**
 * Generates the repeat setting form.
 */
function date_repeat_form($repeat) {
  $exception_collapsed = ($repeat[EXDATE]) ? FALSE : TRUE;
  $collapsed = TRUE;
  if(($repeat[FREQ] != '' && $repeat[FREQ] != 'NONE') || $exception_collapsed == FALSE){
    $collapsed = FALSE;
  }
  $form = array(
    '#type' => 'fieldset',
    '#title' => t('Repeat'),
    '#collapsible' => TRUE,
    '#collapsed' => $collapsed,
    '#weight' => -12,
  );

  $form['FREQ'] = array(
    '#type' => 'select',
    '#title' => t('Frequency'),
    '#default_value' => $repeat[FREQ] ? $repeat[FREQ] : 'NONE',
    '#options' => FREQ_options(),
    '#description' => t('select \'Never\' to disable repeats for this event')
  );

  $options = array ();
  for ($i = 1; $i <= 60; $i++) {
    $options[$i] = $i;
  }
  $form['INTERVAL'] = array(
    '#type' => 'select',
    '#title' => t('Interval'),
    '#default_value' => ($repeat[INTERVAL]) ? $repeat[INTERVAL] : 1,
    '#options' => $options,
    '#description' => t('1 = every, 2 = every other, 3 = every 3rd, etc.')
  );

  $form['BYDAY'] = array(
    '#type' => 'select',
    '#title' => t('Day(s)'),
    '#default_value' => $repeat[BYDAY] ? $repeat[BYDAY] : '',
    '#options' => date_repeat_dow_options(),
    '#description' => t('Determines what day(s) of the week/month this event repeats on (by day of the week).  Lots of options available, scroll down!'),
    '#attributes' => array('size' => '7'),
    '#multiple' => TRUE
  );

  $form['BYMONTH'] = array(
    '#type' => 'select',
    '#title' => t('Month(s)'),
    '#default_value' => $repeat[BYMONTH] ? $repeat[BYMONTH] : '',
    '#options' => date_month_names(TRUE),
    '#description' => t('Selects what month(s) of the year this event repeats on'),
    '#multiple' => TRUE,
    '#size' => 5,
    );

  $form['end_date'] = array(
    '#type' => module_exists('date_popup') ? 'date_popup' : 'date_select',
    '#title' => t('Until'),
    '#date_settings' => array(
      'granularity' => array('year', 'month', 'day'),
      'empty' => 'blank',
      'format' => 'Y-m-d',
      ),
  );

	// start the exception fieldset
  $form['exceptions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Exceptions'),
    '#collapsible' => TRUE,
    '#collapsed' => $exception_collapsed,
    );

  //if there's any exception date data, display it
  $form['exceptions']['EXDATE'] = array(
    '#type' => 'hidden',
    '#value' => $repeat[EXDATE]);
  if ($repeat[EXDATE]) {
    //calculate the hour, minute, and duration for the new node
    //$starthour = (int) $repeat[event['start_orig']]['hour'];
    //$startminute = (int) $repeat[event['start_orig']]['minute'];

    //parse out the individual exception dates, and put them in human-readable format
    $EXDATE = explode(',', $repeat[EXDATE]);
    foreach ($EXDATE as $key => $value) {
      $form['exceptions']['current'][$value]['display'] = array(
        '#type' => 'markup',
        '#value' => '<div>'. event_format_date($value, 'custom', t('F jS, Y')).'</div>');
      $form['exceptions']['current'][$value]['action'] = array(
        '#name' => 'remove_exception_'. str_replace(' ', '_', $value),
        '#type' => 'button',
        '#value' => 'Remove');
    }
    $form['exceptions']['current'] = array(
      '#theme' => 'date_repeat_current_exceptions',
      $form['current']);
  }

  //exception editor date box
  $form['exceptions']['exception_editor'] = array(
    '#title' => t('Exception Editor'),
    '#type' => module_exists('date_popup') ? 'date_popup' : 'date_select',
    '#date_settings' => array(
      'granularity' => array('year', 'month', 'day'),
      'empty' => 'blank',
      'format' => 'Y-m-d',
      ),
    '#description' => t('Enter exception dates here (dates that will not be rendered as part of the repeat sequence).  If you wish to delete an already existing exception, enter the date again. Don\'t forget to press the \'Submit\' button after editing the exception dates!'));
  $form['exceptions']['exception_button'] = array(
    '#type' => 'button',
    '#value' => t('Add Exception'));

  return $form;
}

/**
 * retheme the exception list as a table so the buttons line up
 */
function theme_date_repeat_current_exceptions($rows = array()){
  $rows_info = array();
  foreach($rows[0] as $key => $value){
    if(is_numeric($key)){
      $rows_info[] = array(drupal_render($value['display']), drupal_render($value['action']));
    }
  }
  return theme('table', array(t('Current Exceptions'), ''), $rows_info);
}

/**
 * Adds an exception to the list of current exceptions
 *
 * @param $repeat A fully loaded event node object
 */
function _date_repeat_form_add_exception(&$repeat){

  // explode our string of current exceptions
  $exceptions_temp = array();
  if(!empty($repeat[EXDATE])){
    $exceptions_temp = explode(',', $repeat[EXDATE]);
  }

  // remove any that need to be deleted
  // by checking for a post button for each timestamp
  // (these are defined in theme_date_repeat_form_exception)
  $exceptions = array();
  foreach($exceptions_temp as $e){
  	$removecheck = 'remove_exception_'. str_replace(' ', '_', $e);
  	if (!$_POST[$removecheck]) {
  	  $exceptions[] = $e;
  	}
  }

  // we are only re-processing this string if we have a new exception
  // date in the dropdowns
  if($repeat[EXDATE_edityear] && $repeat[EXDATE_editmonth] && $repeat[EXDATE_editday]){

    // validate the new exception date via the new
    // year, month and day and turn it into a timestamp
    _date_repeat_validate_form_date('EXDATE_edit', t('Exception'), $repeat);

    // only proceed if a valid date was supplied
    if($repeat[EXDATE_edit]){
      // If this one does not exist in the current list, add it
      if (!in_array($repeat[EXDATE_edit], $exceptions)) {
        $exceptions[] = $repeat[EXDATE_edit];
      }

      // TODO: This does not seem to be working here,
      // and part of me likes the fact that it remembers
      // for when I am adding multiple exception dates.
      // Empty out the new exception date dropdowns.
      $repeat[EXDATE_edityear] = '';
      $repeat[EXDATE_editmonth] = '';
      $repeat[EXDATE_editday] = '';
      $repeat[EXDATE_edit] = '';
    }
  }

  // make sure our exceptions are sorted correctly,
  // then implode them back to a string
  asort($exceptions);
  $repeat[EXDATE] = implode(',', $exceptions);
}


/**
 * Themes the time select boxes.
 *
 * @ingroup date_repeat_support
 * @param $element the form element to be themed
 * @return HTML string containing a set of select boxes that contain options for month, day, year
 */
function theme_date_repeat_date($element) {
  return theme('form_element', $element, '<div class="container-inline">'. $element['#children']. '</div>');
}

/**
 * Get an iCal RULE from $form_values.
 */
function _date_repeat_get_rule($repeat) {
  //grab the RRULE data and put them into iCal RRULE format
  $RRULE = 'RRULE:FREQ='.$repeat[FREQ];
  if ((int) $repeat[INTERVAL] > 1) {
    $RRULE .= ';INTERVAL='. $repeat[INTERVAL];
  }
  if ($repeat[BYDAY]) {
      $RRULE .= ';BYDAY='. implode(",", $repeat[BYDAY]);
  }
  if ($repeat[BYMONTH]) {
    $RRULE .= ';BYMONTH='. implode(",", $repeat[BYMONTH]);
  }

  //process the EXDATE values by looping through and recomposing them to iCal format
  if ($repeat[EXDATE]) {
    $EXDATE = explode(',', $repeat[EXDATE]);
    foreach ($EXDATE as $key => $value) {
      $EXDATE[$key] = gmdate("Ymd\THis\Z", $value);
    }
    $RRULE .= chr(13).chr(10).'EXDATE:'.implode(',', $EXDATE);
  }
  return $RRULE;
}

/**
 * Get an iCal RULE description from $form_values.
 */
function _date_repeat_get_description($repeat) {
  if ((int) $repeat[INTERVAL] > 1) {
    $RRULE .= ';INTERVAL='.$repeat[INTERVAL];
  }
  if ($repeat[BYDAY]) {
    $days = date_repeat_dow_day_options();
    $counts = date_repeat_dow_count_options();
    $results = array();
    foreach ($repeat[BYDAY] as $byday) {
      $day = substr($byday, -2);
      $count = str_replace($day, '', $byday);
      $results[] = t('the !count !day', array('!count' => $counts[$count], '!day' => $days[$day]));
    }
    $description[] = implode(t(' and '), $results);
  }
  if ($repeat[BYMONTH]) {
    $results = array();
    $months = date_calc_month_options();
    foreach ($repeat[BYMONTH] as $month) {
      $results[] = t('of !month', array('!month' => $months[$month]));
    }
    $description[] = implode(t(' and '), $results);
  }
  if ($repeat[FREQ] != 'NONE') {
    $freq = FREQ_options();
    $description[] = t('repeating !freq', array('!freq' => $freq[$repeat[FREQ]]));
  }
  if ($repeat[EXDATE]) {
    $results = array();
    $EXDATE = explode(',', $repeat[EXDATE]);
    foreach ($EXDATE as $key => $value) {
      $results[] = gmdate("Ymd\THis\Z", $value);
    }
    $description[] = t('except !dates', array('!dates' => implode(', ', $results)));
  }
  return implode(', ', $description);
}

/**
 * Compute dates that match the requested rule, within a specified date range.
 */
function date_repeat_calc($rule, $start, $end, $exceptions) {
  //parse out the RRULE for this sequence
  date_api_load('date_api_ical.inc');
  $rule = date_ical_parse_rule($rule);

  // Make sure timezone, hours, minutes, and seconds are eliminated
  // so we are just computing the month, day, and year.
  $start_date = date_create(date_limit_value($start, array('year', 'month', 'day')), timezone_open('UTC'));
  $end_date = date_create(date_limit_value($end, array('year', 'month', 'day')), timezone_open('UTC'));

  //if FREQ is set to WEEKLY, MONTHLY, or YEARLY, and none of the BYDAY parameters
  //are set, then this is one of the 'special case' settings
  if ($rule['FREQ'] != "DAILY" && !$rule['BYDAY']) {
    //calculate the day of the week, month, and day of the month
    //for the start date of this sequence
    $days_of_week = array_keys(date_repeat_dow_day_options);
    $BYDAY = array($days_of_week(date_format($start_date, 'w')));
    $BYMONTH = date_format($start_date, 'n');
    $BYMONTHDAY = date_format($start_date, 'j');
    //for weekly repeats, set the BYDAY parameter to the same day
    //of the week as the start date for this sequence
    if ($rule['FREQ'] == "WEEKLY") {
      $rule['BYDAY'] = $BYDAY;
    }
  }
  if ($rule['BYDAY']) {
    $BYDAY = TRUE;
    $day_names = date_repeat_dow_day_options(TRUE);
    foreach ($rule['BYDAY'] as $day) {
      $byday_names[] = $day_names[$day];
    }
  }
  if ($rule['BYMONTH']) {
    $months = $rule['BYMONTH'];
  }
  $interval = intval($rule['INTERVAL']);
  if ($BYDAY) {
    $next_day = drupal_clone($start_date);
    while (date_format('U', $next_day) <= date_format('U', $end_date)) {
      switch ($rule['FREQ']) {
        case 'DAILY':
          foreach ($byday_names as $day_name) {
            date_modify($next_day, $interval .' '. $day_name);
            $days[] = date_format($next_day, DATE_FORMAT_DATETIME);
          }
          break;
        case 'WEEKLY':
          date_modify($next_day, $interval .' weeks');
          $days[] = date_format($next_day, DATE_FORMAT_DATETIME);
          break;
        case 'MONTHLY':
          date_modify($next_day, $interval .' months');
          $days[] = date_format($next_day, DATE_FORMAT_DATETIME);
          break;
        case 'YEARLY':
          date_modify($next_day, $interval .' years');
          $days[] = date_format($next_day, DATE_FORMAT_DATETIME);
          break;
      }
    }
  }
  return $days;
}